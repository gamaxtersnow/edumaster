// Code generated by goctl. DO NOT EDIT.

package students

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	studentFieldNames          = builder.RawFieldNames(&Student{})
	studentRows                = strings.Join(studentFieldNames, ",")
	studentRowsExpectAutoSet   = strings.Join(stringx.Remove(studentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	studentRowsWithPlaceHolder = strings.Join(stringx.Remove(studentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheStudentIdPrefix          = "cache:student:id:"
	cacheStudentPhoneNumberPrefix = "cache:student:phoneNumber:"
)

type (
	studentModel interface {
		Insert(ctx context.Context, data *Student) (sql.Result, error)
		TransInsertCtx(ctx context.Context, session sqlx.Session, data *Student) (sql.Result, error)

		FindOne(ctx context.Context, id int64) (*Student, error)
		FindOneByPhoneNumber(ctx context.Context, phoneNumber string) (*Student, error)
		Update(ctx context.Context, data *Student) error
		Delete(ctx context.Context, id int64) error
		TransCtx(ctx context.Context, fn func(session sqlx.Session) error) error
	}

	defaultStudentModel struct {
		sqlc.CachedConn
		table string
	}

	Student struct {
		Id             int64  `db:"id"`
		Name           string `db:"name"`            // 姓名
		Gender         int64  `db:"gender"`          // 性别 1 男 2 女
		DateOfBirth    int64  `db:"date_of_birth"`   // 出生日期（Unix时间戳）
		City           string `db:"city"`            // 所在城市
		PhoneNumber    string `db:"phone_number"`    // 手机号
		Major          string `db:"major"`           // 专业
		WechatId       string `db:"wechat_id"`       // 微信号
		WechatNickname string `db:"wechat_nickname"` // 微信昵称
		School         string `db:"school"`          // 学校
		Grade          string `db:"grade"`           // 年级
		StudentType    int64  `db:"student_type"`    // 学生属性 1 新生 2 老生)
		Notes          string `db:"notes"`           // 备注
		AccountType    int64  `db:"account_type"`    // 账号类型 1 非VIP 2 VIP
		LoginPassword  string `db:"login_password"`  // 登录密码
		Subscription   string `db:"subscription"`    // 套餐选择
		CreatedAt      int64  `db:"created_at"`      // 创建时间（Unix时间戳）
		UpdatedAt      int64  `db:"updated_at"`      // 更新时间（Unix时间戳）
	}
)

func newStudentModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultStudentModel {
	return &defaultStudentModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`student`",
	}
}

func (m *defaultStudentModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	studentIdKey := fmt.Sprintf("%s%v", cacheStudentIdPrefix, id)
	studentPhoneNumberKey := fmt.Sprintf("%s%v", cacheStudentPhoneNumberPrefix, data.PhoneNumber)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, studentIdKey, studentPhoneNumberKey)
	return err
}

func (m *defaultStudentModel) TransCtx(ctx context.Context, fn func(session sqlx.Session) error) error {
	err := m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		err := fn(session)
		if err != nil {
			return err
		}
		return nil
	})
	return err
}

func (m *defaultStudentModel) FindOne(ctx context.Context, id int64) (*Student, error) {
	studentIdKey := fmt.Sprintf("%s%v", cacheStudentIdPrefix, id)
	var resp Student
	err := m.QueryRowCtx(ctx, &resp, studentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", studentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStudentModel) FindOneByPhoneNumber(ctx context.Context, phoneNumber string) (*Student, error) {
	studentPhoneNumberKey := fmt.Sprintf("%s%v", cacheStudentPhoneNumberPrefix, phoneNumber)
	var resp Student
	err := m.QueryRowIndexCtx(ctx, &resp, studentPhoneNumberKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `phone_number` = ? limit 1", studentRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, phoneNumber); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStudentModel) Insert(ctx context.Context, data *Student) (sql.Result, error) {
	studentIdKey := fmt.Sprintf("%s%v", cacheStudentIdPrefix, data.Id)
	studentPhoneNumberKey := fmt.Sprintf("%s%v", cacheStudentPhoneNumberPrefix, data.PhoneNumber)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, studentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Gender, data.DateOfBirth, data.City, data.PhoneNumber, data.Major, data.WechatId, data.WechatNickname, data.School, data.Grade, data.StudentType, data.Notes, data.AccountType, data.LoginPassword, data.Subscription)
	}, studentIdKey, studentPhoneNumberKey)
	return ret, err
}

func (m *defaultStudentModel) TransInsertCtx(ctx context.Context, session sqlx.Session, data *Student) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, studentRowsExpectAutoSet)
	return session.ExecCtx(ctx, query, data.Name, data.Gender, data.DateOfBirth, data.City, data.PhoneNumber, data.Major, data.WechatId, data.WechatNickname, data.School, data.Grade, data.StudentType, data.Notes, data.AccountType, data.LoginPassword, data.Subscription)
}

func (m *defaultStudentModel) Update(ctx context.Context, newData *Student) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	studentIdKey := fmt.Sprintf("%s%v", cacheStudentIdPrefix, data.Id)
	studentPhoneNumberKey := fmt.Sprintf("%s%v", cacheStudentPhoneNumberPrefix, data.PhoneNumber)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, studentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.Gender, newData.DateOfBirth, newData.City, newData.PhoneNumber, newData.Major, newData.WechatId, newData.WechatNickname, newData.School, newData.Grade, newData.StudentType, newData.Notes, newData.AccountType, newData.LoginPassword, newData.Subscription, newData.Id)
	}, studentIdKey, studentPhoneNumberKey)
	return err
}

func (m *defaultStudentModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheStudentIdPrefix, primary)
}

func (m *defaultStudentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", studentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStudentModel) tableName() string {
	return m.table
}
