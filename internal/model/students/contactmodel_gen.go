// Code generated by goctl. DO NOT EDIT.

package students

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	contactFieldNames          = builder.RawFieldNames(&Contact{})
	contactRows                = strings.Join(contactFieldNames, ",")
	contactRowsExpectAutoSet   = strings.Join(stringx.Remove(contactFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	contactRowsWithPlaceHolder = strings.Join(stringx.Remove(contactFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheContactIdPrefix = "cache:contact:id:"
)

type (
	contactModel interface {
		Insert(ctx context.Context, data *Contact) (sql.Result, error)
		TransInsertCtx(ctx context.Context, session sqlx.Session, data *Contact) (sql.Result, error)

		FindOne(ctx context.Context, id int64) (*Contact, error)
		Update(ctx context.Context, data *Contact) error
		Delete(ctx context.Context, id int64) error
		TransCtx(ctx context.Context, fn func(session sqlx.Session) error) error
	}

	defaultContactModel struct {
		sqlc.CachedConn
		table string
	}

	Contact struct {
		Id           int64  `db:"id"`
		StudentId    int64  `db:"student_id"`   // 关联的学生ID
		Type         int64  `db:"type"`         // 联系人类型 1 主联系人 2 第二联系人
		PhoneNumber  string `db:"phone_number"` // 联系人手机号
		Relationship string `db:"relationship"` // 与学生的关系
		Name         string `db:"name"`         // 联系人姓名
		WechatId     string `db:"wechat_id"`    // 联系人微信号
		CreatedAt    int64  `db:"created_at"`   // 创建时间（Unix时间戳）
		UpdatedAt    int64  `db:"updated_at"`   // 更新时间（Unix时间戳）
	}
)

func newContactModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultContactModel {
	return &defaultContactModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`contact`",
	}
}

func (m *defaultContactModel) Delete(ctx context.Context, id int64) error {
	contactIdKey := fmt.Sprintf("%s%v", cacheContactIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, contactIdKey)
	return err
}

func (m *defaultContactModel) TransCtx(ctx context.Context, fn func(session sqlx.Session) error) error {
	err := m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		err := fn(session)
		if err != nil {
			return err
		}
		return nil
	})
	return err
}

func (m *defaultContactModel) FindOne(ctx context.Context, id int64) (*Contact, error) {
	contactIdKey := fmt.Sprintf("%s%v", cacheContactIdPrefix, id)
	var resp Contact
	err := m.QueryRowCtx(ctx, &resp, contactIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", contactRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContactModel) Insert(ctx context.Context, data *Contact) (sql.Result, error) {
	contactIdKey := fmt.Sprintf("%s%v", cacheContactIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, contactRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.StudentId, data.Type, data.PhoneNumber, data.Relationship, data.Name, data.WechatId)
	}, contactIdKey)
	return ret, err
}

func (m *defaultContactModel) TransInsertCtx(ctx context.Context, session sqlx.Session, data *Contact) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, contactRowsExpectAutoSet)
	return session.ExecCtx(ctx, query, data.StudentId, data.Type, data.PhoneNumber, data.Relationship, data.Name, data.WechatId)
}

func (m *defaultContactModel) Update(ctx context.Context, data *Contact) error {
	contactIdKey := fmt.Sprintf("%s%v", cacheContactIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, contactRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.StudentId, data.Type, data.PhoneNumber, data.Relationship, data.Name, data.WechatId, data.Id)
	}, contactIdKey)
	return err
}

func (m *defaultContactModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheContactIdPrefix, primary)
}

func (m *defaultContactModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", contactRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultContactModel) tableName() string {
	return m.table
}
