// Code generated by goctl. DO NOT EDIT.

package students

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	learningGoalFieldNames          = builder.RawFieldNames(&LearningGoal{})
	learningGoalRows                = strings.Join(learningGoalFieldNames, ",")
	learningGoalRowsExpectAutoSet   = strings.Join(stringx.Remove(learningGoalFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	learningGoalRowsWithPlaceHolder = strings.Join(stringx.Remove(learningGoalFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLearningGoalIdPrefix = "cache:learningGoal:id:"
)

type (
	learningGoalModel interface {
		Insert(ctx context.Context, data *LearningGoal) (sql.Result, error)
		TransInsertCtx(ctx context.Context, session sqlx.Session, data *LearningGoal) (sql.Result, error)

		FindOne(ctx context.Context, id int64) (*LearningGoal, error)
		Update(ctx context.Context, data *LearningGoal) error
		Delete(ctx context.Context, id int64) error
		TransCtx(ctx context.Context, fn func(session sqlx.Session) error) error
	}

	defaultLearningGoalModel struct {
		sqlc.CachedConn
		table string
	}

	LearningGoal struct {
		Id            int64   `db:"id"`
		StudentId     int64   `db:"student_id"`     // 关联的学生ID
		TargetScore   float64 `db:"target_score"`   // 目标分数
		EntryScore    float64 `db:"entry_score"`    // 入学分数
		TargetCourse  string  `db:"target_course"`  // 咨询课程
		TargetCountry string  `db:"target_country"` // 目标国家
		CreatedAt     int64   `db:"created_at"`     // 创建时间（Unix时间戳）
		UpdatedAt     int64   `db:"updated_at"`     // 更新时间（Unix时间戳）
	}
)

func newLearningGoalModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLearningGoalModel {
	return &defaultLearningGoalModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`learning_goal`",
	}
}

func (m *defaultLearningGoalModel) Delete(ctx context.Context, id int64) error {
	learningGoalIdKey := fmt.Sprintf("%s%v", cacheLearningGoalIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, learningGoalIdKey)
	return err
}

func (m *defaultLearningGoalModel) TransCtx(ctx context.Context, fn func(session sqlx.Session) error) error {
	err := m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		err := fn(session)
		if err != nil {
			return err
		}
		return nil
	})
	return err
}

func (m *defaultLearningGoalModel) FindOne(ctx context.Context, id int64) (*LearningGoal, error) {
	learningGoalIdKey := fmt.Sprintf("%s%v", cacheLearningGoalIdPrefix, id)
	var resp LearningGoal
	err := m.QueryRowCtx(ctx, &resp, learningGoalIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", learningGoalRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLearningGoalModel) Insert(ctx context.Context, data *LearningGoal) (sql.Result, error) {
	learningGoalIdKey := fmt.Sprintf("%s%v", cacheLearningGoalIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, learningGoalRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.StudentId, data.TargetScore, data.EntryScore, data.TargetCourse, data.TargetCountry)
	}, learningGoalIdKey)
	return ret, err
}

func (m *defaultLearningGoalModel) TransInsertCtx(ctx context.Context, session sqlx.Session, data *LearningGoal) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, learningGoalRowsExpectAutoSet)
	return session.ExecCtx(ctx, query, data.StudentId, data.TargetScore, data.EntryScore, data.TargetCourse, data.TargetCountry)
}

func (m *defaultLearningGoalModel) Update(ctx context.Context, data *LearningGoal) error {
	learningGoalIdKey := fmt.Sprintf("%s%v", cacheLearningGoalIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, learningGoalRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.StudentId, data.TargetScore, data.EntryScore, data.TargetCourse, data.TargetCountry, data.Id)
	}, learningGoalIdKey)
	return err
}

func (m *defaultLearningGoalModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLearningGoalIdPrefix, primary)
}

func (m *defaultLearningGoalModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", learningGoalRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLearningGoalModel) tableName() string {
	return m.table
}
